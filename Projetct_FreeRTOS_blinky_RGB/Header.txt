configENABLE_BACKWARD_COMPATIBILITY

The FreeRTOS.h header file includes a set of #define macros that map the names of data types used in versions of 
FreeRTOS prior to version 8.0.0 to the names used in FreeRTOS version 8.0.0. The macros allow application code to
update the version of FreeRTOS they are built against from a pre 8.0.0 version to a post 8.0.0 version without modification.
Setting configENABLE_BACKWARD_COMPATIBILITY to 0 in FreeRTOSConfig.h excludes the macros from the build, and in so doing 
allowing validation that no pre version 8.0.0 names are being used

configSUPPORT_STATIC_ALLOCATION

If configSUPPORT_STATIC_ALLOCATION is set to 1 then RTOS objects can be created using RAM provided by the application writer.
If configSUPPORT_STATIC_ALLOCATION is set to 0 then RTOS objects can only be created using RAM allocated from the FreeRTOS heap.
If configSUPPORT_STATIC_ALLOCATION is left undefined it will default to 0.
If configSUPPORT_STATIC_ALLOCATION is set to 1 then the application writer must also provide two callback functions: 
vApplicationGetIdleTaskMemory() to provide the memory for use by the RTOS Idle task, and (if configUSE_TIMERS is set to 1)
vApplicationGetTimerTaskMemory() to provide memory for use by the RTOS Daemon/Timer Service task. Examples are provided below.

			/* configSUPPORT_STATIC_ALLOCATION is set to 1, so the application must provide an
			implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
			used by the Idle task. */
			void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
			                                    StackType_t **ppxIdleTaskStackBuffer,
			                                    uint32_t *pulIdleTaskStackSize )
			{
			/* If the buffers to be provided to the Idle task are declared inside this
			function then they must be declared static – otherwise they will be allocated on
			the stack and so not exists after this function exits. */
			static StaticTask_t xIdleTaskTCB;
			static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];
			
			    /* Pass out a pointer to the StaticTask_t structure in which the Idle task’s
			    state will be stored. */
			    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
			
			    /* Pass out the array that will be used as the Idle task’s stack. */
			    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
			
			    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
			    Note that, as the array is necessarily of type StackType_t,
			    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
			    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
			}
			/*———————————————————–*/		
			/* configSUPPORT_STATIC_ALLOCATION and configUSE_TIMERS are both set to 1, so the
			application must provide an implementation of vApplicationGetTimerTaskMemory()
			to provide the memory that is used by the Timer service task. */
			void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
			                                     StackType_t **ppxTimerTaskStackBuffer,
			                                     uint32_t *pulTimerTaskStackSize )
			{
			/* If the buffers to be provided to the Timer task are declared inside this
			function then they must be declared static – otherwise they will be allocated on
			the stack and so not exists after this function exits. */
			static StaticTask_t xTimerTaskTCB;
			static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];
			
			    /* Pass out a pointer to the StaticTask_t structure in which the Timer
			    task’s state will be stored. */
			    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
			
			    /* Pass out the array that will be used as the Timer task’s stack. */
			    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
			
			    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
			    Note that, as the array is necessarily of type StackType_t,
			    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
			    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
			}

Examples of the callback functions that must be provided by the application to
supply the RAM used by the Idle and Timer Service tasks if configSUPPORT_STATIC_ALLOCATION is set to 1.
See the Static Vs Dynamic Memory Allocation page for more information.

configAPPLICATION_ALLOCATED_HEAP

By default the FreeRTOS heap is declared by FreeRTOS and placed in memory by the linker.
Setting configAPPLICATION_ALLOCATED_HEAP to 1 allows the heap to instead be declared by the application writer,
which allows the application writer to place the heap wherever they like in memory.
If heap_1.c, heap_2.c or heap_4.c is used, and configAPPLICATION_ALLOCATED_HEAP is set to 1, 
then the application writer must provide a uint8_t array with the exact name and dimension as shown below. 
The array will be used as the FreeRTOS heap. How the array is placed at a specific memory location is dependent 
on the compiler being used – refer to your compiler’s documentation.

uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];

ERROR
 undefined first referenced     
  symbol       in file          
 --------- ----------------     
 ucHeap    ./Portable/heap_2.obj

configAPPLICATION_ALLOCATED_HEAP Set to 0

For more information see https://www.freertos.org/a00110.html

